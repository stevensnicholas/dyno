name: Deploy
on:
  push:
    branches:
      - main
      - prod
jobs:
  frontend:
    runs-on: ubuntu-latest
    container: node:16.15.0-alpine
    steps:
      - uses: actions/checkout@v2
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      - name: Upload frontend
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: frontend/build
  backend:
    runs-on: ubuntu-latest
    container: golang:1.17.7-alpine
    steps:
      - uses: actions/checkout@v2
      - name: Build backend
        run: |
          apk add --update make
          make build
      - name: Upload backend
        uses: actions/upload-artifact@v3
        with:
          name: backend
          path: bin
  restler:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./restler
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: branch
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          ECR_REPOSITORY: ${{ steps.branch.outputs.branch }}_dyno_image_repository
=======
          ECR_REPOSITORY: dyno_image_repository
>>>>>>> add-back-in
=======
          ECR_REPOSITORY: ${{ steps.branch.outputs.branch }}_dyno_image_repository
>>>>>>> fix action
=======
          ECR_REPOSITORY: ${{ steps.branch.outputs.branch }}_dyno_image_repository
>>>>>>> 5d54b6cc9c36ba6729eb6278ae915397c427a462
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "ECR_IMAGE_URL=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
  deploy:
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.1.6
    needs:
      - frontend
      - backend
      - restler
    steps:
      - uses: actions/checkout@v2
      - name: Download frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: frontend/build
      - name: Download backend
        uses: actions/download-artifact@v3
        with:
          name: backend
          path: bin
      - name: Get branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: branch
      - name: Terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          test -f bin/api/main
          test -f frontend/build/index.html
          cd terraform
          printf "terraform {\n  backend \"s3\" {}\n}" > state.tf
          terraform init \
            -backend-config="bucket=comp9447-state" \
            -backend-config="key=${{ steps.branch.outputs.branch }}" \
            -backend-config="region=ap-southeast-2" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=comp9447-state"
          terraform apply -auto-approve \
            -var="deployment_id=${{ steps.branch.outputs.branch }}" \
            -var="restler_image_tag=${{ env.ECR_IMAGE_URL }}";
